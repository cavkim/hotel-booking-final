/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/user'
import { Route as SettingRouteImport } from './routes/setting'
import { Route as RoomRouteImport } from './routes/room'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as PaymentRouteImport } from './routes/payment'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as BookingRouteImport } from './routes/booking'
import { Route as IndexRouteImport } from './routes/index'

const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingRoute = SettingRouteImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoute = RoomRouteImport.update({
  id: '/room',
  path: '/room',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentRoute = PaymentRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingRoute = BookingRouteImport.update({
  id: '/booking',
  path: '/booking',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/booking': typeof BookingRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/register': typeof RegisterRoute
  '/room': typeof RoomRoute
  '/setting': typeof SettingRoute
  '/user': typeof UserRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/booking': typeof BookingRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/register': typeof RegisterRoute
  '/room': typeof RoomRoute
  '/setting': typeof SettingRoute
  '/user': typeof UserRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/booking': typeof BookingRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/payment': typeof PaymentRoute
  '/register': typeof RegisterRoute
  '/room': typeof RoomRoute
  '/setting': typeof SettingRoute
  '/user': typeof UserRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/booking'
    | '/dashboard'
    | '/login'
    | '/payment'
    | '/register'
    | '/room'
    | '/setting'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/booking'
    | '/dashboard'
    | '/login'
    | '/payment'
    | '/register'
    | '/room'
    | '/setting'
    | '/user'
  id:
    | '__root__'
    | '/'
    | '/booking'
    | '/dashboard'
    | '/login'
    | '/payment'
    | '/register'
    | '/room'
    | '/setting'
    | '/user'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookingRoute: typeof BookingRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  PaymentRoute: typeof PaymentRoute
  RegisterRoute: typeof RegisterRoute
  RoomRoute: typeof RoomRoute
  SettingRoute: typeof SettingRoute
  UserRoute: typeof UserRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setting': {
      id: '/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room': {
      id: '/room'
      path: '/room'
      fullPath: '/room'
      preLoaderRoute: typeof RoomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/booking': {
      id: '/booking'
      path: '/booking'
      fullPath: '/booking'
      preLoaderRoute: typeof BookingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookingRoute: BookingRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  PaymentRoute: PaymentRoute,
  RegisterRoute: RegisterRoute,
  RoomRoute: RoomRoute,
  SettingRoute: SettingRoute,
  UserRoute: UserRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
